name: Production

on:
  push:
    branches:
      - main
jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy Firebase Service Account Key
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}' > firebaseServiceAccount.json

      - name: Set Firebase Config
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_PROD }} 
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_PROD }}
          BASE_URL: ${{ secrets.BASE_URL_PROD }}
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=$FIREBASE_API_KEY" >> .env
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=$FIREBASE_AUTH_DOMAIN" >> .env
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID" >> .env
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=$FIREBASE_STORAGE_BUCKET" >> .env
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=$FIREBASE_MESSAGING_SENDER_ID" >> .env
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=$FIREBASE_APP_ID" >> .env
          echo "NEXT_PUBLIC_BASE_URL=$BASE_URL" >> .env

      - name: Set Shopify Config
        env:
          SHOPIFY_ADMIN_API_KEY: ${{ secrets.SHOPIFY_ADMIN_API_KEY_PROD }}
          SHOPIFY_ADMIN_API_SECRET: ${{ secrets.SHOPIFY_ADMIN_API_SECRET_PROD }}
          SHOPIFY_STORE_URL: ${{ secrets.SHOPIFY_STORE_URL_PROD }}
          SHOPIFY_STORE_NAME: ${{ secrets.SHOPIFY_STORE_NAME_PROD }}
          SHOPIFY_API_PASSWORD_WITH_TOKEN: ${{ secrets.SHOPIFY_API_PASSWORD_WITH_TOKEN_PROD }}
          SHOPIFY_GRAPHQL_API_URL: ${{ secrets.SHOPIFY_GRAPHQL_API_URL_PROD }}
          SHOPIFY_ENCRYPT_KEY: ${{ secrets.SHOPIFY_ENCRYPT_KEY_PROD }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN_PROD }}
          SHOPIFY_WEBHOOK_SIGNATURE: ${{ secrets.SHOPIFY_WEBHOOK_SIGNATURE_PROD }}
        run: |
          echo "SHOPIFY_ADMIN_API_KEY=$SHOPIFY_ADMIN_API_KEY" >> .env
          echo "SHOPIFY_ADMIN_API_SECRET=$SHOPIFY_ADMIN_API_SECRET" >> .env
          echo "SHOPIFY_STORE_URL=$SHOPIFY_STORE_URL" >> .env
          echo "SHOPIFY_STORE_NAME=$SHOPIFY_STORE_NAME" >> .env
          echo "SHOPIFY_API_PASSWORD_WITH_TOKEN=$SHOPIFY_API_PASSWORD_WITH_TOKEN" >> .env
          echo "SHOPIFY_GRAPHQL_API_URL=$SHOPIFY_GRAPHQL_API_URL" >> .env
          echo "SHOPIFY_ENCRYPT_KEY=$SHOPIFY_ENCRYPT_KEY" >> .env
          echo "SHOPIFY_ACCESS_TOKEN=$SHOPIFY_ACCESS_TOKEN" >> .env
          echo "SHOPIFY_WEBHOOK_SIGNATURE=$SHOPIFY_WEBHOOK_SIGNATURE" >> .env

      - name: Set Auth Account Config
        env:
          ADMIN_UID_SCIEMO: ${{ secrets.ADMIN_UID_SCIEMO }}
          USER_UID_ILLUMINUS: ${{ secrets.USER_UID_ILLUMINUS }}
          USER_UID_MATSUMOTO_SCHOOL: ${{ secrets.USER_UID_MATSUMOTO_SCHOOL }}
        run: |
          echo "ADMIN_UID_SCIEMO=$ADMIN_UID_SCIEMO" >> .env
          echo "USER_UID_ILLUMINUS=$USER_UID_ILLUMINUS" >> .env
          echo "USER_UID_MATSUMOTO_SCHOOL=$USER_UID_MATSUMOTO_SCHOOL" >> .env

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ vars.GAR_LOCATION }}-docker.pkg.dev'

      # NOTE: Alternative option - authentication via credentials json
      # - name: Docker Auth
      # id: docker-auth
      # uses: 'docker/login-action@v1'
      # with:
      #   registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
      #   username: _json_key
      #   password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID_PROD }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME_PROD }}:${{ github.sha }}" ./
          docker push "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID_PROD }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME_PROD }}:${{ github.sha }}"

      # END - Docker auth and build
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ vars.SERVICE_NAME_PROD }}
          region: ${{ vars.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID_PROD }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME_PROD }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
        # env:
        #   NODE_ENV: production
        #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
